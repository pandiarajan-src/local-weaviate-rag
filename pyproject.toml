[project]
name = "local-weaviate-rag"
version = "0.1.0"
description = "Minimal local Weaviate RAG (OpenAI Embeddings + GPT-4o)"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "weaviate-client>=4.6.5",
  "openai>=1.40.0",
  "tiktoken>=0.7.0",
  "python-dotenv>=1.0.1",
  "fastapi>=0.104.0",
  "uvicorn[standard]>=0.24.0",
  "pydantic>=2.5.0",
  "pydantic-settings>=2.1.0",
  "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
  "ruff>=0.6.0",
  "black>=24.0.0",
  "isort>=5.13.0",
  "mypy>=1.11.0",
  "types-requests>=2.32.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
show-fixes = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "B904",   # Allow raise from None
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "ERA001",  # Found commented-out code (sometimes needed)
    "F403",   # Star imports (used in __init__.py files)
    "ARG001", # Unused function arguments (common in FastAPI dependencies)
    "ARG004", # Unused static method arguments
    "PLC0415", # Import not at top level (needed in some async contexts)
    "PTH110", # os.path.exists usage (legacy code compatibility)
    "PTH113", # os.path.isfile usage (legacy code compatibility)
    "PTH118", # os.path.join usage (legacy code compatibility)
    "PTH119", # os.path.basename usage (legacy code compatibility)
    "PTH120", # os.path.dirname usage (legacy code compatibility)
    "PTH122", # os.path.splitext usage (legacy code compatibility)
    "PTH123", # os.path.splitext usage (legacy code compatibility)
    "PTH108", # os.unlink usage (legacy code compatibility)
    "PTH109", # os.getcwd usage (legacy code compatibility)
    "PTH202", # os.path.getsize usage (legacy code compatibility)
    "PLW2901", # Loop variable overwrite (common pattern)
    "SIM102", # Nested if statements (readability preference)
    "W293",   # Blank line contains whitespace (formatter handles this)
    "W291",   # Trailing whitespace (formatter handles this)
    "B007",   # Loop control variable not used (test patterns)
    "RUF059", # Unpacked variable never used (test patterns)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "PLR2004", "S101"]  # Allow unused args, magic values, asserts in tests
"**/test_*.py" = ["ARG", "PLR2004", "S101"]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["rag"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rag"]
force_sort_within_sections = true
combine_as_imports = true
split_on_trailing_comma = true

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "weaviate.*",
    "tiktoken.*",
    "dotenv.*",
]
ignore_missing_imports = true

# Ignore complex type issues in legacy code
[[tool.mypy.overrides]]
module = [
    "rag.*",
    "api.dependencies.clients",
    "api.routers.*",
    "api.services.*",
]
ignore_errors = true
